apiVersion: v1
kind: PersistentVolume
metadata:
  name: airflow-logs-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /tmp/airflow-logs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-logs-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      initContainers:
        - name: init-db
          image: blutenherz/airflow-mlops:1.0.0
          command:
            - "/bin/bash"
            - "-c"
            - |
              echo "Esperando a que PostgreSQL esté listo..."
              until pg_isready -h mlops-postgres -U airflow; do
                echo "PostgreSQL no está listo - esperando..."
                sleep 5
              done
              echo "PostgreSQL está listo, iniciando inicialización de Airflow..."
              
              echo "Inicializando base de datos de Airflow..."
              airflow db init
              
              echo "Creando usuario administrador..."
              airflow users create \
                --username airflow \
                --password airflow \
                --firstname Admin \
                --lastname User \
                --role Admin \
                --email admin@example.com || echo "El usuario ya existe"
              
              echo "Inicialización completada con éxito."
          envFrom:
            - configMapRef:
                name: airflow-config
          env:
            - name: PGPASSWORD
              value: "airflow"
      containers:
        - name: airflow-webserver
          image: blutenherz/airflow-mlops:1.0.0
          command: ["airflow", "webserver"]
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: airflow-config
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
            - name: airflow-logs
              mountPath: /opt/airflow/logs
            - name: plugins-volume
              mountPath: /opt/airflow/plugins
            - name: tmp-dir
              mountPath: /opt/airflow/dags/tmp
            - name: dag1
              mountPath: /opt/airflow/dags/data_pipeline.py
              subPath: data_pipeline.py
            - name: dag2
              mountPath: /opt/airflow/dags/modeling_pipeline.py
              subPath: modeling_pipeline.py
            - name: dag3
              mountPath: /opt/airflow/dags/production_pipeline.py
              subPath: production_pipeline.py
      volumes:
        - name: dags-volume
          emptyDir: {}
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc
        - name: plugins-volume
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        - name: dag1
          configMap:
            name: airflow-dags-1
        - name: dag2
          configMap:
            name: airflow-dags-2
        - name: dag3
          configMap:
            name: airflow-dags-3
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
spec:
  selector:
    app: airflow-webserver
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      containers:
        - name: airflow-scheduler
          image: blutenherz/airflow-mlops:1.0.0
          command: ["airflow", "scheduler"]
          envFrom:
            - configMapRef:
                name: airflow-config
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
            - name: airflow-logs
              mountPath: /opt/airflow/logs
            - name: plugins-volume
              mountPath: /opt/airflow/plugins
            - name: tmp-dir
              mountPath: /opt/airflow/dags/tmp
            - name: dag1
              mountPath: /opt/airflow/dags/data_pipeline.py
              subPath: data_pipeline.py
            - name: dag2
              mountPath: /opt/airflow/dags/modeling_pipeline.py
              subPath: modeling_pipeline.py
            - name: dag3
              mountPath: /opt/airflow/dags/production_pipeline.py
              subPath: production_pipeline.py
      volumes:
        - name: dags-volume
          emptyDir: {}
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc
        - name: plugins-volume
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        - name: dag1
          configMap:
            name: airflow-dags-1
        - name: dag2
          configMap:
            name: airflow-dags-2
        - name: dag3
          configMap:
            name: airflow-dags-3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-worker
  template:
    metadata:
      labels:
        app: airflow-worker
    spec:
      containers:
        - name: airflow-worker
          image: blutenherz/airflow-mlops:1.0.0
          command: ["airflow", "celery", "worker", "--concurrency=2"]
          envFrom:
            - configMapRef:
                name: airflow-config
          env:
            - name: C_FORCE_ROOT
              value: "true"
          resources:
            requests:
              memory: "3Gi"
              cpu: "800m"
            limits:
              memory: "5Gi"
              cpu: "1000m"
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
            - name: airflow-logs
              mountPath: /opt/airflow/logs
            - name: plugins-volume
              mountPath: /opt/airflow/plugins
            - name: tmp-dir
              mountPath: /opt/airflow/dags/tmp
            - name: dag1
              mountPath: /opt/airflow/dags/data_pipeline.py
              subPath: data_pipeline.py
            - name: dag2
              mountPath: /opt/airflow/dags/modeling_pipeline.py
              subPath: modeling_pipeline.py
            - name: dag3
              mountPath: /opt/airflow/dags/production_pipeline.py
              subPath: production_pipeline.py
      volumes:
        - name: dags-volume
          emptyDir: {}
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc
        - name: plugins-volume
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        - name: dag1
          configMap:
            name: airflow-dags-1
        - name: dag2
          configMap:
            name: airflow-dags-2
        - name: dag3
          configMap:
            name: airflow-dags-3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-triggerer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-triggerer
  template:
    metadata:
      labels:
        app: airflow-triggerer
    spec:
      containers:
        - name: airflow-triggerer
          image: blutenherz/airflow-mlops:1.0.0
          command: ["airflow", "triggerer"]
          envFrom:
            - configMapRef:
                name: airflow-config
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: secret-key
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "800m"
          volumeMounts:
            - name: dags-volume
              mountPath: /opt/airflow/dags
            - name: airflow-logs
              mountPath: /opt/airflow/logs
            - name: plugins-volume
              mountPath: /opt/airflow/plugins
            - name: tmp-dir
              mountPath: /opt/airflow/dags/tmp
            - name: dag1
              mountPath: /opt/airflow/dags/data_pipeline.py
              subPath: data_pipeline.py
            - name: dag2
              mountPath: /opt/airflow/dags/modeling_pipeline.py
              subPath: modeling_pipeline.py
            - name: dag3
              mountPath: /opt/airflow/dags/production_pipeline.py
              subPath: production_pipeline.py
      volumes:
        - name: dags-volume
          emptyDir: {}
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc
        - name: plugins-volume
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        - name: dag1
          configMap:
            name: airflow-dags-1
        - name: dag2
          configMap:
            name: airflow-dags-2
        - name: dag3
          configMap:
            name: airflow-dags-3